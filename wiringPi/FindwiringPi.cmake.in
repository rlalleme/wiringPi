# Find the wiringPi module (this file is meant to be installed using make install)
# Once found the following variables are set :
#	wiringPi_FOUND		True to specify that the module has been found
#
#	wiringPi_INCLUDE_DIRS	Path(s) to the headers
#
#	wiringPi_LIBRARIES	Link these to use wiringPi

# To help CMake in finding the wiringPi module
# one can set the following variables :
# wiringPi_DIR		Those variables can be either set using 'set' command of
# or			CMake, or using '-D<var>=value' while calling CMake or 
# wiringPi_ROOT		finally they can be set as environment variables.
# or			Those three variables are aliases, so just set one is enough.
# wiringPiROOT
#
# You can set any of them using one of the following methods :
#	1) Set it as environnement varialbe (e.g. export)
#	2) Give it as argument for cmake : cmake -DlibHATP_DIR="...."
#	3) In a CMakeLists.txt, set a variable : set(libHATP_DIR ...)	

#Varaibles to change if the module changes
set(HEADER_FILES @wiring_HEADERS@)
set(INCLUDE_PATH_SUFFIXES include include/wiringPi wiringPi)
set(LIBRARIES @wiring_LIBRARIES@)
set(CURRENT_PREFIX @CMAKE_INSTALL_PREFIX@)

foreach(header ${HEADER_FILES})
	find_path(${header}_PATH ${header} PATH_SUFFIXES ${INCLUDE_PATH_SUFFIXES}
	HINTS ${CURRENT_PREFIX}
	${wiringPi_DIR} ${wiringPi_ROOT} ${wiringPiROOT}
	$ENV{wiringPi_DIR} $ENV{wiringPi_ROOT} $ENV{wiringPiROOT})
	if(${header}_PATH)
		list(APPEND wiringPi_INCLUDE_DIRS ${${header}_PATH})
		unset(${header}_PATH CACHE)
	else(${header}_PATH)
		list(APPEND MISSING_HEADERS ${header})
	endif(${header}_PATH)
endforeach()

if(wiringPi_INCLUDE_DIRS)
	list(REMOVE_DUPLICATES wiringPi_INCLUDE_DIRS)
endif(wiringPi_INCLUDE_DIRS)

if(MISSING_HEADERS)
	unset(wiringPi_INCLUDE_DIRS)
endif(MISSING_HEADERS)

find_library(wiringPi_LIBRARIES ${LIBRARIES} PATH_SUFFIXES lib
	HINTS ${CURRENT_PREFIX}
	${wiringPi_DIR} ${wiringPi_ROOT} ${wiringPiROOT}
	$ENV{wiringPi_DIR} $ENV{wiringPi_ROOT} $ENV{wiringPiROOT})

if(wiringPi_INCLUDE_DIRS AND wiringPi_LIBRARIES)
	set(wiringPi_FOUND TRUE)
else(wiringPi_INCLUDE_DIRS AND wiringPi_LIBRARIES)
	if(NOT wiringPi_FIND_QUIETLY)
		if(NOT wiringPi_INCLUDE_DIRS)
			message(STATUS "Unable to find wiringPi, the following header files are missing : ${MISSING_HEADERS}")
		else(NOT wiringPi_INCLUDE_DIRS)
			message(STATUS "Header files found.")
		endif(NOT wiringPi_INCLUDE_DIRS)
		if(NOT wiringPi_LIBRARIES)
			message(STATUS "Unable to find wiringPi library files !")
		else(NOT wiringPi_LIBRARIES)
			message(STATUS "Library files found.")
		endif(NOT wiringPi_LIBRARIES)
	endif(NOT wiringPi_FIND_QUIETLY)
endif(wiringPi_INCLUDE_DIRS AND wiringPi_LIBRARIES)

if(wiringPi_FOUND)
	if(NOT wiringPi_FIND_QUIETLY)
		message(STATUS "Found components for wiringPi")
		message(STATUS "wiringPi_INCLUDE_DIRS = ${wiringPi_INCLUDE_DIRS}")
		message(STATUS "wiringPi_LIBRARIES = ${wiringPi_LIBRARIES}")
	endif(NOT wiringPi_FIND_QUIETLY)
else(wiringPi_FOUND)
	if(wiringPi_FIND_REQUIRED)
		set(wiringPi_DIR "" CACHE PATH "Paths where to additionally look for
		wiringPi (alias of wiringPi_ROOT and wiringPiROOT)")
		set(wiringPi_ROOT "" CACHE PATH "Paths where to additionally look for
		wiringPi (alias of wiringPi_DIR and wiringPiROOT)")
		set(wiringPiROOT "" CACHE PATH "Paths where to additionally look for
		wiringPi (alias of wiringPi_DIR and wiringPi_ROOT)")
		if(NOT wiringPi_FIND_QUIETLY)
			message("\nCould not find wiringPi!\n")
			message("You can use any of the following variables to help CMake to find the header files and libraries :")
			message("	wiringPi_DIR or wiringPi_ROOT or wiringPiROOT")
			message("You should use one and set it to the root path of your local wiringPi install directory (if you installed it in a different folder than system root).")
			message("To set one you can either :")
			message("	- use 'set(wiringPi_DIR ....)' command in the CMakeLists.txt (separator ' ')")
			message("	- use '-DwiringPi_DIR=....' as an option to Cmake (separator ';')")
			message("	- set one as an environment variable (e.g. export in bash, with separator ';')\n")
		endif(NOT wiringPi_FIND_QUIETLY)
		message(FATAL_ERROR "Could not find wiringPi!")
	endif(wiringPi_FIND_REQUIRED)
endif(wiringPi_FOUND)

mark_as_advanced (
	wiringPi_FOUND
	wiringPi_LIBRARIES
	wiringPi_INCLUDE_DIRS
)
